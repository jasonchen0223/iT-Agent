// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  configs       AgentConfig[] @relation("UserToAgentConfig")
  teams         AgentTeam[] @relation("UserToAgentTeam")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 会话模型
model Session {
  id           String   @id @default(cuid())
  name         String
  description  String?
  type         String   @default("conversation") // conversation, workflow, parallel
  status       String   @default("active")      // active, paused, completed, error
  metadata     String?  // JSON字符串存储的元数据
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 会话状态
  currentRound Int      @default(0)
  maxRounds   Int      @default(10)
  strategy    String   @default("sequential")  // sequential, parallel, adaptive
  activeAgentId String?
  lastMessageAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  
  // 关联关系
  agents      AgentTeamMember[]
  messages    AgentInteraction[]
  toolCalls   ToolCall[]
  collaborationInstances AgentCollaborationInstance[]
  agentTasks  AgentTask[]
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([type])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 代理配置模型
model AgentConfig {
  id          String   @id @default(cuid())
  name        String
  role        String
  description String?
  icon        String?
  color       String?
  systemPrompt String
  capability  String   // 使用逗号分隔的能力列表
  model       String   @default("gpt-3.5-turbo")
  settings    String?  // JSON字符串
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  user        User?   @relation("UserToAgentConfig", fields: [createdBy], references: [id], onDelete: SetNull)
  teamMembers AgentTeamMember[]
}

// 代理交互模型
model AgentInteraction {
  id          String   @id @default(cuid())
  sessionId   String
  senderId    String?
  receiverId  String?
  type        String   // user, agent, system
  content     String
  metadata    String?
  createdAt   DateTime @default(now())
  
  // 关联关系
  session     Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

// 代理团队模型
model AgentTeam {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // workflow, conversation, parallel
  status      String   @default("inactive") // active, inactive, archived
  metadata    String?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  user        User?    @relation("UserToAgentTeam", fields: [createdBy], references: [id], onDelete: SetNull)
  members     AgentTeamMember[]
  sessions    Session[]
}

// 代理团队成员模型
model AgentTeamMember {
  id          String   @id @default(cuid())
  teamId      String
  configId    String
  role        String   // leader, member, observer, specialist
  position    Int      @default(0)
  isRequired  Boolean  @default(true)
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  team        AgentTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  config      AgentConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  // 修复关系
  agent       Agent? @relation(fields: [agentId], references: [id])
  agentId     String?
}

// 工具调用记录模型
model ToolCall {
  id            String   @id
  toolId        String
  sessionId     String?
  agentId       String?
  params        String   // JSON字符串
  result        String?  // JSON字符串
  status        String   // pending, success, error
  startTime     DateTime
  endTime       DateTime?
  error         String?
  executionTime Int?
  
  // 关联关系
  session       Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  
  @@index([sessionId])
  @@index([agentId])
  @@index([toolId])
}

// 代理模型
model Agent {
  id           String            @id @default(cuid())
  name         String
  type         String
  description  String?
  config       String            // JSON字符串
  capabilities String            // 逗号分隔的能力列表
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  teamMembers  AgentTeamMember[]
  tasks        AgentTask[]
}

// 代理协作模型
model AgentCollaboration {
  id           String                     @id @default(cuid())
  name         String
  description  String?
  type         String
  nodes        String                     // JSON字符串表示的节点数组
  startNodeId  String
  status       String                     // 状态：pending, running, completed, failed, cancelled
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  createdBy    String?
  instances    AgentCollaborationInstance[]
}

// 代理协作实例
model AgentCollaborationInstance {
  id              String             @id @default(cuid())
  collaborationId String
  sessionId       String
  status          String             // 状态：pending, running, completed, failed, cancelled, paused
  currentNodeId   String
  context         String             // JSON字符串存储的上下文数据
  startTime       DateTime           @default(now())
  endTime         DateTime?
  collaboration   AgentCollaboration @relation(fields: [collaborationId], references: [id], onDelete: Cascade)
  session         Session            @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  tasks           AgentTask[]

  @@index([collaborationId])
  @@index([sessionId])
}

// 代理任务
model AgentTask {
  id                     String                      @id @default(cuid())
  name                   String
  description            String?
  type                   String
  status                 String                      // 状态：pending, assigned, running, completed, failed, cancelled
  priority               String                      // 优先级：low, medium, high, urgent
  inputs                 String                      // JSON字符串
  outputs                String?                     // JSON字符串
  assignedAgentId        String?
  sessionId              String
  parentTaskId           String?
  collaborationInstanceId String?
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  startTime              DateTime?
  endTime                DateTime?
  deadline               DateTime?
  dependencies           String?                     // JSON字符串表示依赖任务ID列表
  agent                  Agent?                      @relation(fields: [assignedAgentId], references: [id])
  session                Session                     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  parent                 AgentTask?                  @relation("TaskToSubTask", fields: [parentTaskId], references: [id])
  subTasks               AgentTask[]                 @relation("TaskToSubTask")
  collaborationInstance  AgentCollaborationInstance? @relation(fields: [collaborationInstanceId], references: [id])

  @@index([assignedAgentId])
  @@index([sessionId])
  @@index([parentTaskId])
  @@index([collaborationInstanceId])
}
