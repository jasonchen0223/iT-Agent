import OpenAI from 'openai';
import { Agent } from '@/types/agent';
import { Message } from '@/types/message';
import { AgentConfig } from '@/types/agent-config';

// 创建OpenAI客户端实例
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY || '',
});

/**
 * 代理执行器
 * 处理代理的消息执行和AI模型调用
 */
export class AgentExecutor {
    private agent: Agent;
    private config: AgentConfig | null = null;
    private conversationHistory: Message[] = [];
    
    /**
     * 构造函数
     * @param agent 代理对象
     * @param config 代理配置（可选）
     */
    constructor(agent: Agent, config?: AgentConfig) {
        this.agent = agent;
        this.config = config || null;
    }
    
    /**
     * 设置代理配置
     * @param config 代理配置
     */
    setConfig(config: AgentConfig): void {
        this.config = config;
    }
    
    /**
     * 获取代理配置
     */
    getConfig(): AgentConfig | null {
        return this.config;
    }
    
    /**
     * 设置会话历史
     * @param messages 消息数组
     */
    setConversationHistory(messages: Message[]): void {
        this.conversationHistory = [...messages];
    }
    
    /**
     * 添加消息到会话历史
     * @param message 消息对象
     */
    addToConversationHistory(message: Message): void {
        this.conversationHistory.push(message);
    }
    
    /**
     * 获取会话历史
     */
    getConversationHistory(): Message[] {
        return this.conversationHistory;
    }
    
    /**
     * 处理接收到的消息并生成响应
     * @param message 接收到的消息
     * @returns 生成的响应消息
     */
    async processMessage(message: Message): Promise<Omit<Message, 'id' | 'createdAt'>> {
        try {
            // 添加接收到的消息到历史
            this.addToConversationHistory(message);
            
            // 准备发送给LLM的消息列表
            const messages = this.prepareMessagesForLLM();
            
            // 调用AI模型获取响应
            const response = await this.callAIModel(messages);
            
            // 创建响应消息
            const responseMessage: Omit<Message, 'id' | 'createdAt'> = {
                content: response,
                type: 'text',
                senderId: this.agent.id,
                receiverId: message.senderId,
                sessionId: this.agent.sessionId,
                metadata: {
                    autoGenerated: true,
                    model: this.config?.model || 'gpt-3.5-turbo',
                },
            };
            
            return responseMessage;
        } catch (error) {
            console.error('处理消息失败:', error);
            
            // 返回错误消息
            return {
                content: `处理消息时发生错误: ${error instanceof Error ? error.message : '未知错误'}`,
                type: 'error',
                senderId: this.agent.id,
                receiverId: message.senderId,
                sessionId: this.agent.sessionId,
                metadata: {
                    error: true,
                },
            };
        }
    }
    
    /**
     * 准备发送给LLM的消息列表
     */
    private prepareMessagesForLLM(): Array<{ role: string; content: string }> {
        const messages: Array<{ role: string; content: string }> = [];
        
        // 添加系统消息
        if (this.config?.systemMessage) {
            messages.push({
                role: 'system',
                content: this.config.systemMessage,
            });
        } else {
            // 默认系统消息
            messages.push({
                role: 'system',
                content: `你是${this.agent.name}，一个${this.agent.role}。请根据你的角色和专长回答问题。`
            });
        }
        
        // 添加会话历史
        const relevantHistory = this.getRelevantConversationHistory();
        for (const message of relevantHistory) {
            // 确定消息角色
            let role: 'user' | 'assistant';
            
            if (message.receiverId === this.agent.id) {
                role = 'user';
            } else if (message.senderId === this.agent.id) {
                role = 'assistant';
            } else {
                // 跳过不相关的消息
                continue;
            }
            
            messages.push({
                role,
                content: message.content,
            });
        }
        
        return messages;
    }
    
    /**
     * 获取相关的会话历史
     * 过滤掉不相关的消息，并限制数量以避免超出上下文窗口
     */
    private getRelevantConversationHistory(): Message[] {
        // 只保留与当前代理相关的消息
        const relevantMessages = this.conversationHistory.filter(message => 
            message.senderId === this.agent.id || message.receiverId === this.agent.id
        );
        
        // 限制消息数量，避免超出上下文窗口
        // 这里使用简单的策略：保留最近的20条消息
        // 实际应用中可能需要更复杂的策略，例如基于token计数
        const maxMessages = 20;
        if (relevantMessages.length > maxMessages) {
            return relevantMessages.slice(-maxMessages);
        }
        
        return relevantMessages;
    }
    
    /**
     * 调用AI模型
     * @param messages 消息列表
     * @returns 模型响应文本
     */
    private async callAIModel(messages: Array<{ role: string; content: string }>): Promise<string> {
        try {
            // 获取模型配置
            const model = this.config?.model || 'gpt-3.5-turbo';
            const temperature = this.config?.temperature || 0.7;
            const maxTokens = this.config?.maxTokens;
            
            // 调用OpenAI API
            const response = await openai.chat.completions.create({
                model,
                messages,
                temperature,
                max_tokens: maxTokens,
            });
            
            // 提取响应文本
            const responseText = response.choices[0]?.message?.content || '无法生成响应';
            return responseText;
        } catch (error) {
            console.error('调用AI模型失败:', error);
            throw new Error('调用AI模型失败');
        }
    }
} 